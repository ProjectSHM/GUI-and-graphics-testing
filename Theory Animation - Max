from Tkinter import *
import math
import tkFont

root = Tk()

theory_animation = Canvas(root, width=400, height=320, bg="white")
theory_animation.pack()

radius = 50
x_circle_list = []
y_circle_list = []
angle = 1.675*3
c = 0

sin_x_list = []
sin_y_list = []

degrees = c*angle

size = tkFont.Font(size=10)

for f in range(1, 360, 1):
    x_circle_list.append(round(50*math.cos(math.radians(c*angle)), 1))
    y_circle_list.append(round(-50*math.sin(math.radians(c*angle)), 1)+160)
    c += 1

c=0
minus = 45
def graphs():
    theta_circle = theory_animation.create_oval(50,110-minus, 150, 210-minus)
    
    graph_line_y = theory_animation.create_line(170, 90-minus, 170, 230-minus)
    graph_line_arrow_y = theory_animation.create_line(170,90-minus, 165,95-minus), theory_animation.create_line(170,90-minus, 175,95-minus)
    
    graph_line_x = theory_animation.create_line(170, 160-minus, 386, 160-minus)
    graph_line_arrow_x = theory_animation.create_line(386,160-minus, 381, 155-minus), theory_animation.create_line(386,160-minus, 381, 165-minus)

    theory_animation.create_text(175,80-minus, text="Amplitude")
    theory_animation.create_text(380,150-minus, text="Time")
    theory_animation.create_text(200,15, text="y = Asin("+u'\u03A9'.lower()+"t + "+ u'\u03A6'.lower()+")", font=size)

def animation():
    global c
    global angle
    
    circle_line_x = theory_animation.create_line(100, 160-minus, 150, 160-minus)

    spring_particle = theory_animation.create_oval(20,y_circle_list[c]-5-minus, 30,y_circle_list[c]+5-minus, fill="red")

    circle_line = theory_animation.create_line(100,160-minus, x_circle_list[c]+100,y_circle_list[c]-minus )
    circle_particle = theory_animation.create_oval(x_circle_list[c]+95,y_circle_list[c]-5-minus,
                                                   x_circle_list[c]+105,y_circle_list[c]+5-minus, fill="red")

    arc = theory_animation.create_arc(90,150-minus, 110,170-minus, start=0, extent=c*angle, fill="light blue")
    if c*angle == 361.8:
        theory_animation.delete(arc)
        
    sine_wave = theory_animation.create_line(170+c,y_circle_list[c]-minus, 170+c+1, y_circle_list[c+1]-minus, fill="blue")
    sine_wave_particle = theory_animation.create_oval(165+c,y_circle_list[c]-5-minus, 175+c, y_circle_list[c]+5-minus, fill="red")

    theta = theory_animation.create_text(112, 148-minus, text=u'\u0398'.lower())
    link_line = theory_animation.create_line(x_circle_list[c]+100,y_circle_list[c]-minus, 170+c, y_circle_list[c]-minus, fill="grey")
        
    if 170+c+1 == 386:
        return
    c +=1
    root.after(40, clear_screen, spring_particle, circle_line, circle_particle, sine_wave_particle, link_line, arc)

def clear_screen(a, b, c, d, e, f):
    theory_animation.delete(a, b, c, d, e, f)
    animation()

def final_clear():
    global c
    c = 0
    theory_animation.delete("all")
    graphs()
    root.after(40, animation)

    
execute = Button(root, text="execute", command=final_clear)
execute.pack()    
graphs()  
#animation()
root.mainloop()
